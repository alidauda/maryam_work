/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/vocDoSnqwAd
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */

/** Add fonts into your Next.js project:

import { Libre_Franklin } from 'next/font/google'

libre_franklin({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client";

import { useState, useMemo, JSX, SVGProps } from "react";
import {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuRadioGroup,
  DropdownMenuRadioItem,
} from "@/components/ui/dropdown-menu";
import { Button } from "@/components/ui/button";
import {
  Accordion,
  AccordionItem,
  AccordionTrigger,
  AccordionContent,
} from "@/components/ui/accordion";
import { Label } from "@/components/ui/label";
import { Checkbox } from "@/components/ui/checkbox";
import { Card, CardContent } from "@/components/ui/card";
import Link from "next/link";
import { $Enums, RoomStatus } from "@prisma/client";

interface Room {
  id: number;
  capacity: number;
  availableRoom: number;
  price: number;
  status: $Enums.RoomStatus;
  propertyId: number;
  createdAt: Date;
  updatedAt: Date;
}

export default function Rooms(props: { props: Room[] }) {
  console.log(props.props);
  const [sortBy, setSortBy] = useState("price");
  const [filterBy, setFilterBy] = useState({
    capacity: [],
    status: [],
  });
  const handleSortChange = (value: string) => {
    setSortBy(value);
  };
  const handleFilterChange = (type: string, value: number | string) => {
    setFilterBy({
      ...filterBy,
      [type]: filterBy[type].includes(value)
        ? filterBy[type].filter((item) => item !== value)
        : [...filterBy[type], value],
    });
  };
  const filteredRooms = useMemo(() => {
    return props.props
      .filter((room) => {
        if (
          filterBy.capacity.length > 0 &&
          !filterBy.capacity.includes(room.capacity as never)
        ) {
          return false;
        }
        if (
          filterBy.status.length > 0 &&
          !filterBy.status.includes(room.status as never)
        ) {
          return false;
        }
        return true;
      })
      .sort((a, b) => {
        switch (sortBy) {
          case "price":
            return a.price - b.price;
          case "capacity":
            return b.capacity - a.capacity;
          case "available":
            return b.availableRoom - a.availableRoom;
          default:
            return 0;
        }
      });
  }, [props.props, sortBy, filterBy]);
  return (
    <div className="container mx-auto px-4 py-8">
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-2xl font-bold">Available Rooms</h1>
        <div className="flex items-center gap-4">
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="outline" className="flex items-center gap-2">
                <ArrowUpDownIcon className="w-4 h-4" />
                Sort by: {sortBy}
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end">
              <DropdownMenuRadioGroup
                value={sortBy}
                onValueChange={handleSortChange}
              >
                <DropdownMenuRadioItem value="price">
                  Price
                </DropdownMenuRadioItem>
                <DropdownMenuRadioItem value="capacity">
                  Capacity
                </DropdownMenuRadioItem>
                <DropdownMenuRadioItem value="available">
                  Available
                </DropdownMenuRadioItem>
              </DropdownMenuRadioGroup>
            </DropdownMenuContent>
          </DropdownMenu>
          <Accordion type="single" collapsible>
            <AccordionItem value="filters">
              <AccordionTrigger className="flex items-center gap-2">
                <FilterIcon className="w-4 h-4" />
                Filters
              </AccordionTrigger>
              <AccordionContent>
                <div className="grid gap-4">
                  <div>
                    <h3 className="text-lg font-semibold mb-2">Capacity</h3>
                    <div className="grid gap-2">
                      <Label className="flex items-center gap-2 font-normal">
                        <Checkbox
                          onCheckedChange={() =>
                            handleFilterChange("capacity", 1)
                          }
                        />
                        1 person
                      </Label>
                      <Label className="flex items-center gap-2 font-normal">
                        <Checkbox
                          onCheckedChange={() =>
                            handleFilterChange("capacity", 2)
                          }
                        />
                        2 people
                      </Label>
                      <Label className="flex items-center gap-2 font-normal">
                        <Checkbox
                          onCheckedChange={() =>
                            handleFilterChange("capacity", 4)
                          }
                        />
                        4 people
                      </Label>
                      <Label className="flex items-center gap-2 font-normal">
                        <Checkbox
                          onCheckedChange={() =>
                            handleFilterChange("capacity", 6)
                          }
                        />
                        6 people
                      </Label>
                      <Label className="flex items-center gap-2 font-normal">
                        <Checkbox
                          onCheckedChange={() =>
                            handleFilterChange("capacity", 8)
                          }
                        />
                        8 people
                      </Label>
                    </div>
                  </div>
                  <div>
                    <h3 className="text-lg font-semibold mb-2">Status</h3>
                    <div className="grid gap-2">
                      <Label className="flex items-center gap-2 font-normal">
                        <Checkbox
                          onCheckedChange={() =>
                            handleFilterChange("status", "available")
                          }
                        />
                        Available
                      </Label>
                      <Label className="flex items-center gap-2 font-normal">
                        <Checkbox
                          onCheckedChange={() =>
                            handleFilterChange("status", "sold out")
                          }
                        />
                        Sold Out
                      </Label>
                    </div>
                  </div>
                </div>
              </AccordionContent>
            </AccordionItem>
          </Accordion>
        </div>
      </div>
      <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
        {filteredRooms.map((room) => (
          <Card key={room.id} className="relative group">
            <Link href="#" className="absolute inset-0 z-10" prefetch={false}>
              <span className="sr-only">View Room</span>
            </Link>
            <CardContent className="flex flex-col items-start gap-4">
              <div className="flex items-center justify-between w-full">
                <h3 className="text-xl font-bold">room of {room.capacity}</h3>
                <span
                  className={`px-2 py-1 rounded-full text-xs font-semibold ${
                    room.status === RoomStatus.AVAILABLE
                      ? "bg-green-100 text-green-600"
                      : "bg-red-100 text-red-600"
                  }`}
                >
                  {room.status}
                </span>
              </div>
              <div className="flex items-center justify-between w-full">
                <div className="flex items-center gap-2">
                  <UserIcon className="w-4 h-4" />
                  <span>{room.capacity} people</span>
                </div>
                <div className="flex items-center gap-2">
                  <CalendarIcon className="w-4 h-4" />
                  <span>{room.availableRoom} available</span>
                </div>
              </div>
              <div className="flex items-center justify-between w-full">
                <h4 className="text-lg font-bold">â‚¦{room.price}/month</h4>
                <Button variant="outline" size="sm">
                  Book Now
                </Button>
              </div>
            </CardContent>
          </Card>
        ))}
      </div>
    </div>
  );
}

function ArrowUpDownIcon(
  props: JSX.IntrinsicAttributes & SVGProps<SVGSVGElement>
) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="m21 16-4 4-4-4" />
      <path d="M17 20V4" />
      <path d="m3 8 4-4 4 4" />
      <path d="M7 4v16" />
    </svg>
  );
}

function CalendarIcon(
  props: JSX.IntrinsicAttributes & SVGProps<SVGSVGElement>
) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M8 2v4" />
      <path d="M16 2v4" />
      <rect width="18" height="18" x="3" y="4" rx="2" />
      <path d="M3 10h18" />
    </svg>
  );
}

function FilterIcon(props: JSX.IntrinsicAttributes & SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <polygon points="22 3 2 3 10 12.46 10 19 14 21 14 12.46 22 3" />
    </svg>
  );
}

function UserIcon(props: JSX.IntrinsicAttributes & SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M19 21v-2a4 4 0 0 0-4-4H9a4 4 0 0 0-4 4v2" />
      <circle cx="12" cy="7" r="4" />
    </svg>
  );
}
